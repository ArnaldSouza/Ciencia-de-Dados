install.packages("e1071")
install.packages("e1071")
install.packages("randomForest")
library(e1071)
library(randomForest)
credito = read.csv("./dados/Credit.csv")
credito = read.csv("./Credit.csv")
credito = read.csv("dados/Credit.csv")
credito = read.csv("./dados/Credit.csv")
library(e1071)
library(randomForest)
credito = read.csv("./dados/Credit.csv")
credito$class = as.factor(credito$class)
set.seed(234)
amostra = sample(2,1000,replace=T, prob=c(0.7,0.3))
creditotreino = credito[amostra==1,]
creditoteste = credito[amostra==2,]
modelo = svm(class ~., creditotreino)
predicao = predict(modelo,creditoteste)
confusao = table(creditoteste$class,predicao)
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
importancia  = randomForest(class ~ ., data = creditotreino)
importancia  = randomForest(class ~ ., data = creditotreino)
col = importance(importancia)
col = importance(importancia)
col
varImpPlot(importancia)
modelo = svm(class ~ credit_amount + age + duration + checking_status ,creditotreino)
predicao = predict(modelo,creditoteste)
confusao = table(creditoteste$class,predicao)
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
install.packages("class")
install.packages("class")
library(class)
head(iris)
summary(iris)
amostra = sample(2,150,replace=T, prob=c(0.7,0.3))
iristreino = iris[amostra==1,]
iristeste = iris[amostra==2,]
dim(iristreino)
dim(iristeste)
previsao = knn(iristreino[,1:4],iristeste[,1:4],iristreino[,5],k=3)
previsao
tabela = table(iristeste[,5],previsao)
tabela
(tabela[1] + tabela[5] + tabela[9]) / sum(tabela)
library(class)
head(iris)
summary(iris)
amostra = sample(2,150,replace=T, prob=c(0.7,0.3))
iristreino = iris[amostra==1,]
iristeste = iris[amostra==2,]
dim(iristreino)
dim(iristeste)
previsao = knn(iristreino[,1:4],iristeste[,1:4],iristreino[,5],k=3)
previsao
tabela = table(iristeste[,5],previsao)
tabela
(tabela[1] + tabela[5] + tabela[9]) / sum(tabela)
install.packages('randomForest')
install.packages('randomForest')
library(randomForest)
credito = read.csv('credit.csv')
install.packages('randomForest')
library(randomForest)
library(randomForest)
credito = read.csv('./dados/credit.csv')
credito = read.csv('./dados/credit.csv')
#transforma classe em fator
credito$class = as.factor(credito$class)
head(credito)
amostra = sample(2,1000,replace=T, prob=c(0.7,0.3))
creditotreino = credito[amostra==1,]
creditoteste = credito[amostra==2,]
floresta = randomForest(class ~ .,data=creditotreino, ntree=100,importance=T)
floresta
plot(floresta)
floresta
previsao = predict(floresta,creditoteste)
previsao
confusao = table(previsao,creditoteste$class)
confusao
taxaacerto = (confusao[1] + confusao[4]) / sum(confusao)
taxaacerto
install.packages('mltools')
install.packages('mltools')
install.packages('data.table')
library(mltools)
library(data.table)
Titanic
tit = as.data.frame(Titanic)
tit
labenc = data.matrix(tit[,1:3])
labenc
hotenco  = one_hot(as.data.table( tit[,1:3]))
hotenco  = one_hot(as.data.table( tit[,1:3]))
hotenco
iris
iris_padr =  scale(iris[,1:4])
iris_padr
normaliza = function(x){
return((x-min(x))/(max(x)-min(x)))
}
iris_norm = normaliza(iris[,1:4])
iris_norm
#Executar com ctrl + shift + Enter
boxplot(iris[,1:4],main="Dados Originais")
boxplot(iris_padr, main="Padronizados")
boxplot(iris_norm, main="Normalizados")
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
iris
cluster = kmeans(iris[1:4],centers=3)
cluster
table(iris$Species,cluster$cluster)
cluster
plot(iris$Sepal.Length, iris$Sepal.Width,col=cluster$cluster, pch=20, main="iris")
plot(iris[,1:4],col=cluster$cluster, main="Iris")
g2 = fviz_cluster(cluster, data=iris[1:4], ellipse.type = "convex", ggtheme = theme_bw(),
main="Cluster ")
plot(g2)
iris2 = iris
iris2['grupos'] = cluster$cluster
iris2
install.packages("cluster")
#install.packages("factoextra")
library(cluster)
library(factoextra)
cluster = pam(iris[,1:4],k=3)
cluster
plot(cluster)
table(iris$Species,cluster$clustering)
g = fviz_cluster(list(data = iris[,1:4], cluster=cluster$cluster), ellipse.type = "norm", ggtheme = theme_bw(),
main="Cluster")
plot(g)
#install.packages("factoextra")
install.packages("e1071")
#install.packages("factoextra")
install.packages("e1071")
#install.packages("RColorBrewer"
library(factoextra
library(e1071
cluster = cmeans(iris[,1:4], centers=3)
library(factoextra)
library(e1071)
library(RColorBrewer)
cluster = cmeans(iris[,1:4], centers=3)
cluster$membership
heatmap(cluster$membership, Colv = NA, Rowv = NA, col =  brewer.pal(n = 9, name = "YlOrRd"))
table(iris$Species, cluster$cluster)
g = fviz_cluster(list(data = iris[,1:4], cluster=cluster$cluster), ellipse.type = "norm", ggtheme = theme_bw(),
main="Cluster")
plot(g)
install.packages("gridExtra", dependencies=T)
install.packages("gridExtra", dependencies=T)
library(factoextra)
hc = hcut(iris[,-5], k = 3, hc_method = "complete", stand=T)
hc
plot(hc)
g1 =   fviz_dend(hc, show_labels = FALSE, rect = TRUE, ggtheme = theme_bw(), main="Cluster Hierárquico")
g1 =   fviz_dend(hc, show_labels = FALSE, rect = TRUE, ggtheme = theme_bw(), main="Cluster Hierárquico")
plot(g1)
g2 = fviz_cluster(hc, ellipse.type = "norm", ggtheme = theme_bw(),
main="Cluster Hierárquico")
plot(g2)
#Executar com ctrl + shift + enter
plot(g1)
plot(g2)
install.packages("arules")
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
transacoes = read.transactions("./dados/transacoes.txt",format="basket",sep=",")
transacoes
inspect(transacoes)
image(transacoes)
regras = apriori(transacoes, parameter= list(supp=0.5, conf=0.5, minlen=2))
regras
summary(regras)
inspect(regras)
plot(regras, method="graph", control=list(type="items"))
plot(regras, method="matrix", control=list(type="items"))
plot(regras, method="matrix3D")
write.csv(DATAFRAME(regras),"regras.csv")
library(arules)
library("arulesViz")
transacoes <-read.transactions("./dados/transacoes.txt",format="basket",sep=",")
image(transacoes)
regras = eclat(transacoes, parameter = list(minlen=2))
inspect(regras)
regras = eclat(transacoes, parameter = list(minlen=2))
inspect(regras)
plot(regras, method="graph", control=list(type="items"))
